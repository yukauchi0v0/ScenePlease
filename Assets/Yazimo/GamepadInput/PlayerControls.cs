//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Yazimo/GamepadInput/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""1fc78604-6124-4e2f-8fe4-25e6c9d19d68"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb4b5f4c-9727-474a-9499-98dd09d66208"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalMove"",
                    ""type"": ""Value"",
                    ""id"": ""e8984288-b226-4c6d-a235-eb6538da32c7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""81a4f946-8807-458e-840f-a12455f52181"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTimeSlider"",
                    ""type"": ""Value"",
                    ""id"": ""1e5bf7c0-260d-4a36-a3e4-8e2a08feae41"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetDay"",
                    ""type"": ""Value"",
                    ""id"": ""95a1d118-5969-49a1-945d-173e60b050e4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetDusk"",
                    ""type"": ""Value"",
                    ""id"": ""fb960081-5d7b-4945-a4e5-0e541853f1d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetNight"",
                    ""type"": ""Value"",
                    ""id"": ""aa18ba89-ab9c-419e-b0b9-feabf02df98b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SliderToggle"",
                    ""type"": ""Value"",
                    ""id"": ""640ce7a5-13a4-46f0-9eef-2512f192106b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpawnCar"",
                    ""type"": ""Button"",
                    ""id"": ""0795b168-c284-4eec-a769-fb5b29611bdc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireButton"",
                    ""type"": ""Button"",
                    ""id"": ""1e6508d6-7151-4d05-956d-58330beeea90"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""48feb521-a339-4692-919d-6711891c731d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3e757222-696f-42cc-8dc9-59a6295cfb71"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""25a8b0c7-3fc5-4038-9174-89a9006c9ded"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""10b5db65-64f2-422c-bb61-e49fca5be5dc"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5708c805-d9d6-4d8e-af30-7c9e01c3c859"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""27ff584b-0e4a-4bab-869a-dcc868cfa0f4"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e2c1e08-55e1-48a9-a1b8-36b139334715"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f0dcb60-3839-4c5d-a80e-a95b9be22fa9"",
                    ""path"": ""<MidiDevice>/control064"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af056998-0170-4674-ad42-c93238797646"",
                    ""path"": ""<MidiDevice>/control048"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDusk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a923d331-2a90-4855-a5e6-a8941d9d3cca"",
                    ""path"": ""<MidiDevice>/control032"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetNight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afd2ac35-ba54-4494-8956-7e44f38ea565"",
                    ""path"": ""<MidiDevice>/control000"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeTimeSlider"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c67cc7b0-afb4-4747-9f6e-8c892a69c0e3"",
                    ""path"": ""<MidiDevice>/control016"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SliderToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7293d067-efdc-47ad-917f-fa6139910687"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a46a519-366a-4979-b3ea-5f8e9c7d9741"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_VerticalMove = m_Player.FindAction("VerticalMove", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_ChangeTimeSlider = m_Player.FindAction("ChangeTimeSlider", throwIfNotFound: true);
        m_Player_SetDay = m_Player.FindAction("SetDay", throwIfNotFound: true);
        m_Player_SetDusk = m_Player.FindAction("SetDusk", throwIfNotFound: true);
        m_Player_SetNight = m_Player.FindAction("SetNight", throwIfNotFound: true);
        m_Player_SliderToggle = m_Player.FindAction("SliderToggle", throwIfNotFound: true);
        m_Player_SpawnCar = m_Player.FindAction("SpawnCar", throwIfNotFound: true);
        m_Player_FireButton = m_Player.FindAction("FireButton", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_VerticalMove;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_ChangeTimeSlider;
    private readonly InputAction m_Player_SetDay;
    private readonly InputAction m_Player_SetDusk;
    private readonly InputAction m_Player_SetNight;
    private readonly InputAction m_Player_SliderToggle;
    private readonly InputAction m_Player_SpawnCar;
    private readonly InputAction m_Player_FireButton;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @VerticalMove => m_Wrapper.m_Player_VerticalMove;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @ChangeTimeSlider => m_Wrapper.m_Player_ChangeTimeSlider;
        public InputAction @SetDay => m_Wrapper.m_Player_SetDay;
        public InputAction @SetDusk => m_Wrapper.m_Player_SetDusk;
        public InputAction @SetNight => m_Wrapper.m_Player_SetNight;
        public InputAction @SliderToggle => m_Wrapper.m_Player_SliderToggle;
        public InputAction @SpawnCar => m_Wrapper.m_Player_SpawnCar;
        public InputAction @FireButton => m_Wrapper.m_Player_FireButton;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @VerticalMove.started += instance.OnVerticalMove;
            @VerticalMove.performed += instance.OnVerticalMove;
            @VerticalMove.canceled += instance.OnVerticalMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @ChangeTimeSlider.started += instance.OnChangeTimeSlider;
            @ChangeTimeSlider.performed += instance.OnChangeTimeSlider;
            @ChangeTimeSlider.canceled += instance.OnChangeTimeSlider;
            @SetDay.started += instance.OnSetDay;
            @SetDay.performed += instance.OnSetDay;
            @SetDay.canceled += instance.OnSetDay;
            @SetDusk.started += instance.OnSetDusk;
            @SetDusk.performed += instance.OnSetDusk;
            @SetDusk.canceled += instance.OnSetDusk;
            @SetNight.started += instance.OnSetNight;
            @SetNight.performed += instance.OnSetNight;
            @SetNight.canceled += instance.OnSetNight;
            @SliderToggle.started += instance.OnSliderToggle;
            @SliderToggle.performed += instance.OnSliderToggle;
            @SliderToggle.canceled += instance.OnSliderToggle;
            @SpawnCar.started += instance.OnSpawnCar;
            @SpawnCar.performed += instance.OnSpawnCar;
            @SpawnCar.canceled += instance.OnSpawnCar;
            @FireButton.started += instance.OnFireButton;
            @FireButton.performed += instance.OnFireButton;
            @FireButton.canceled += instance.OnFireButton;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @VerticalMove.started -= instance.OnVerticalMove;
            @VerticalMove.performed -= instance.OnVerticalMove;
            @VerticalMove.canceled -= instance.OnVerticalMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @ChangeTimeSlider.started -= instance.OnChangeTimeSlider;
            @ChangeTimeSlider.performed -= instance.OnChangeTimeSlider;
            @ChangeTimeSlider.canceled -= instance.OnChangeTimeSlider;
            @SetDay.started -= instance.OnSetDay;
            @SetDay.performed -= instance.OnSetDay;
            @SetDay.canceled -= instance.OnSetDay;
            @SetDusk.started -= instance.OnSetDusk;
            @SetDusk.performed -= instance.OnSetDusk;
            @SetDusk.canceled -= instance.OnSetDusk;
            @SetNight.started -= instance.OnSetNight;
            @SetNight.performed -= instance.OnSetNight;
            @SetNight.canceled -= instance.OnSetNight;
            @SliderToggle.started -= instance.OnSliderToggle;
            @SliderToggle.performed -= instance.OnSliderToggle;
            @SliderToggle.canceled -= instance.OnSliderToggle;
            @SpawnCar.started -= instance.OnSpawnCar;
            @SpawnCar.performed -= instance.OnSpawnCar;
            @SpawnCar.canceled -= instance.OnSpawnCar;
            @FireButton.started -= instance.OnFireButton;
            @FireButton.performed -= instance.OnFireButton;
            @FireButton.canceled -= instance.OnFireButton;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnVerticalMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnChangeTimeSlider(InputAction.CallbackContext context);
        void OnSetDay(InputAction.CallbackContext context);
        void OnSetDusk(InputAction.CallbackContext context);
        void OnSetNight(InputAction.CallbackContext context);
        void OnSliderToggle(InputAction.CallbackContext context);
        void OnSpawnCar(InputAction.CallbackContext context);
        void OnFireButton(InputAction.CallbackContext context);
    }
}
